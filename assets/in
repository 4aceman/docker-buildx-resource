#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.bash

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

server_args=$(jq -r '.source.server_args // ""' < $payload)

start_docker "$server_args"

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
email=$(jq -r '.source.email // ""' < $payload)

if [ -n "${username}" ] && [ -n "${password}" ] && [ -n "${email}" ]; then
  docker login -u "${username}" -p "${password}" -e "${email}"
fi

repository="$(jq -r '.source.repository // ""' < $payload)"
tag="$(jq -r '.source.tag // "latest"' < $payload)"
rootfs="$(jq -r '.params.rootfs // false' < $payload)"
skip_download="$(jq -r '.params.skip_download // false' < $payload)"

mkdir -p $destination

if ! $skip_download
then
  docker_pull "${repository}:${tag}"

  image=$(docker_image "$repository" "$tag")
  if [ -z "$image" ]; then
    echo "failed to determine image id :("
    exit 1
  fi

  docker save -o ${destination}/image "$image"

  if [ "$rootfs" = "true" ]; then
    docker run --cidfile=container.cid "$image" echo container created
    docker export $(cat container.cid) > ${destination}/rootfs.tar
  fi
else
  if private_registry "${repository}"
  then
    registry=$(extract_registry $repository)
    repository=$(extract_repository $repository)
    json_selector="."
  else
    registry="registry.hub.docker.com"
    json_selector=".[0].id"
  fi

  echo "Downloading ${repository}:${tag} metadata from ${registry}..."
  image=$(curl -s -X GET http://${registry}/v1/repositories/${repository}/tags/${tag} | jq "$json_selector" | tr -d '"')
  echo "Done"
fi

echo "$repository" > ${destination}/repository
echo "$tag" > ${destination}/tag
echo "$image" > ${destination}/image-id

jq -n "{
  version: {
    image: $(echo $image | jq -R .)
  },
  metadata: [
    { name: \"image\", value: $(echo $image | head -c 12 | jq -R .) }
  ]
}" >&3
